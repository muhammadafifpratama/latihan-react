{"version":3,"sources":["pages/home.js","pages/nothome.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","notHome","Example","props","useState","collapsed","setCollapsed","Navbar","color","light","NavbarBrand","href","className","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","App","path","component","home","exact","nothome","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAYeA,E,iLARP,OACI,6C,GAHOC,aCYJC,E,iLAVP,OACI,iD,GAHUD,a,gEC4BPE,EAzBC,SAACC,GAAW,IAAD,EACWC,oBAAS,GADpB,mBAChBC,EADgB,KACLC,EADK,KAKvB,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,GACvB,+BAAO,kBAACC,EAAA,EAAD,CAAaC,KAAK,IAAIC,UAAU,WAAhC,eACP,kBAACC,EAAA,EAAD,CAAeC,QANN,kBAAMR,GAAcD,IAMSO,UAAU,SAChD,kBAACG,EAAA,EAAD,CAAUC,QAASX,EAAWY,QAAM,GAChC,kBAACC,EAAA,EAAD,CAAKD,QAAM,GACP,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAST,KAAK,KAAd,SAEJ,kBAACQ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAST,KAAK,iBAAd,kBCuBbU,E,iLAnCX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWC,EAAMC,OAAK,IACtC,kBAAC,IAAD,CAAOH,KAAK,YAAYC,UAAWG,EAASD,OAAK,S,GAPvCzB,aCME2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDoHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4e13563d.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                ini Home\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React, { Component } from \"react\"\r\n\r\nclass notHome extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                ini not Home\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default notHome","import React, { useState } from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\r\n\r\n\r\n\r\nconst Example = (props) => {\r\n    const [collapsed, setCollapsed] = useState(true);\r\n\r\n    const toggleNavbar = () => setCollapsed(!collapsed);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar color=\"faded\" light>\r\n                <table><NavbarBrand href=\"/\" className=\"mr-auto\">reactstrap</NavbarBrand></table>\r\n                <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\r\n                <Collapse isOpen={!collapsed} navbar>\r\n                    <Nav navbar>\r\n                        <NavItem>\r\n                            <NavLink href=\"/\">home</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"/not-home    \">not home</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Example;","import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\"\nimport home from \"./pages/home\"\nimport nothome from \"./pages/nothome\"\nimport Navbar from \"./components/navbar\"\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Route path=\"/\" component={home} exact />\n        <Route path=\"/not-home\" component={nothome} exact />\n      </div>\n    )\n  }\n\n  //   state = {\n  //     nama: \"lian\",\n  //     sekolah: \"purwadhika\",\n  //     number: 0\n  //   }\n\n  //   gantinama = () => { this.setState({ nama: \"andi\", sekolah: \"pwd\" }) }\n  //   tambah = () => { this.setState({ number: this.state.number + 1 }) }\n  //   kurang = () => { this.setState({ number: this.state.number - 1 }) }\n\n  //   render() {\n  //     return (\n  //       <div>\n  //         <div>\n  //           {this.state.number}\n  //           <div>                                                                                                                                                                                                                                                                                                                        nbbv>\n  //             <button onClick={this.tambah}>+</button>\n  //             <button onClick={this.kurang}>-</button>\n  //           </div>\n  //         </div>\n  //       </div>\n  //     )\n  //   }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}